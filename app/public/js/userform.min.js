webpackJsonp([3],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _userformcontainer = __webpack_require__(11);

	var _userformcontainer2 = _interopRequireDefault(_userformcontainer);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// global __data
	var UserFormContainer = React.createFactory(_userformcontainer2.default);
	ReactDOM.render(UserFormContainer(__data), document.getElementById('userform-mount'));

/***/ },
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// Helper function to get current user after authenticating
	var Auth = {};

	// Fetch user id
	Auth.getId = function () {
	  var user = Auth.getUser();
	  return user._id ? user._id : false;
	};

	// Fetch user token
	Auth.getToken = function () {
	  var user = Auth.getUser();
	  return user.token ? user.token : false;
	};

	// Fetch user data from localStorage
	Auth.getUser = function () {
	  var user = localStorage.getItem('user');
	  if (user) return JSON.parse(user);
	  return false;
	};

	Auth.logoutUser = function () {
	  if (Auth.getUser()) {
	    delete localStorage.user;
	  }
	};

	// Used to populate localStorage.user with user data.
	Auth.setUser = function (json) {
	  var user = JSON.stringify(json);
	  localStorage.setItem('user', user);
	  return user;
	};

	// Check if user is logged in
	Auth.isLoggedIn = function () {
	  return Auth.getUser() ? true : false;
	};

	exports.default = Auth;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	__webpack_require__(6);

	var defaultOptions = {
	  headers: {
	    'Accept': 'application/json'
	  }
	};

	function makeRequest(endpoint, userOptions) {
	  var options = Object.assign(defaultOptions, userOptions);

	  if (options.method === 'get' || options.method === 'GET') {
	    delete options.body;
	  }
	  return fetch(endpoint, options).then(function (response) {
	    return response.json();
	  }).then(function (json) {
	    return json;
	  }).catch(function (ex) {
	    console.log('parsing failed', ex);
	  });
	}

	exports.default = makeRequest;

/***/ },
/* 6 */
/***/ function(module, exports) {

	(function(self) {
	  'use strict';

	  if (self.fetch) {
	    return
	  }

	  var support = {
	    searchParams: 'URLSearchParams' in self,
	    iterable: 'Symbol' in self && 'iterator' in Symbol,
	    blob: 'FileReader' in self && 'Blob' in self && (function() {
	      try {
	        new Blob()
	        return true
	      } catch(e) {
	        return false
	      }
	    })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  }

	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name)
	    }
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }

	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value)
	    }
	    return value
	  }

	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
	    var iterator = {
	      next: function() {
	        var value = items.shift()
	        return {done: value === undefined, value: value}
	      }
	    }

	    if (support.iterable) {
	      iterator[Symbol.iterator] = function() {
	        return iterator
	      }
	    }

	    return iterator
	  }

	  function Headers(headers) {
	    this.map = {}

	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value)
	      }, this)

	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name])
	      }, this)
	    }
	  }

	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name)
	    value = normalizeValue(value)
	    var list = this.map[name]
	    if (!list) {
	      list = []
	      this.map[name] = list
	    }
	    list.push(value)
	  }

	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)]
	  }

	  Headers.prototype.get = function(name) {
	    var values = this.map[normalizeName(name)]
	    return values ? values[0] : null
	  }

	  Headers.prototype.getAll = function(name) {
	    return this.map[normalizeName(name)] || []
	  }

	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  }

	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = [normalizeValue(value)]
	  }

	  Headers.prototype.forEach = function(callback, thisArg) {
	    Object.getOwnPropertyNames(this.map).forEach(function(name) {
	      this.map[name].forEach(function(value) {
	        callback.call(thisArg, value, name, this)
	      }, this)
	    }, this)
	  }

	  Headers.prototype.keys = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push(name) })
	    return iteratorFor(items)
	  }

	  Headers.prototype.values = function() {
	    var items = []
	    this.forEach(function(value) { items.push(value) })
	    return iteratorFor(items)
	  }

	  Headers.prototype.entries = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push([name, value]) })
	    return iteratorFor(items)
	  }

	  if (support.iterable) {
	    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
	  }

	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true
	  }

	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result)
	      }
	      reader.onerror = function() {
	        reject(reader.error)
	      }
	    })
	  }

	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader()
	    reader.readAsArrayBuffer(blob)
	    return fileReaderReady(reader)
	  }

	  function readBlobAsText(blob) {
	    var reader = new FileReader()
	    reader.readAsText(blob)
	    return fileReaderReady(reader)
	  }

	  function Body() {
	    this.bodyUsed = false

	    this._initBody = function(body) {
	      this._bodyInit = body
	      if (typeof body === 'string') {
	        this._bodyText = body
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this._bodyText = body.toString()
	      } else if (!body) {
	        this._bodyText = ''
	      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {
	        // Only support ArrayBuffers for POST method.
	        // Receiving ArrayBuffers happens via Blobs, instead.
	      } else {
	        throw new Error('unsupported BodyInit type')
	      }

	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8')
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type)
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
	        }
	      }
	    }

	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }

	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      }

	      this.arrayBuffer = function() {
	        return this.blob().then(readBlobAsArrayBuffer)
	      }

	      this.text = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }

	        if (this._bodyBlob) {
	          return readBlobAsText(this._bodyBlob)
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as text')
	        } else {
	          return Promise.resolve(this._bodyText)
	        }
	      }
	    } else {
	      this.text = function() {
	        var rejected = consumed(this)
	        return rejected ? rejected : Promise.resolve(this._bodyText)
	      }
	    }

	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      }
	    }

	    this.json = function() {
	      return this.text().then(JSON.parse)
	    }

	    return this
	  }

	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase()
	    return (methods.indexOf(upcased) > -1) ? upcased : method
	  }

	  function Request(input, options) {
	    options = options || {}
	    var body = options.body
	    if (Request.prototype.isPrototypeOf(input)) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url
	      this.credentials = input.credentials
	      if (!options.headers) {
	        this.headers = new Headers(input.headers)
	      }
	      this.method = input.method
	      this.mode = input.mode
	      if (!body) {
	        body = input._bodyInit
	        input.bodyUsed = true
	      }
	    } else {
	      this.url = input
	    }

	    this.credentials = options.credentials || this.credentials || 'omit'
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers)
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET')
	    this.mode = options.mode || this.mode || null
	    this.referrer = null

	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body)
	  }

	  Request.prototype.clone = function() {
	    return new Request(this)
	  }

	  function decode(body) {
	    var form = new FormData()
	    body.trim().split('&').forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=')
	        var name = split.shift().replace(/\+/g, ' ')
	        var value = split.join('=').replace(/\+/g, ' ')
	        form.append(decodeURIComponent(name), decodeURIComponent(value))
	      }
	    })
	    return form
	  }

	  function headers(xhr) {
	    var head = new Headers()
	    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\n')
	    pairs.forEach(function(header) {
	      var split = header.trim().split(':')
	      var key = split.shift().trim()
	      var value = split.join(':').trim()
	      head.append(key, value)
	    })
	    return head
	  }

	  Body.call(Request.prototype)

	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {}
	    }

	    this.type = 'default'
	    this.status = options.status
	    this.ok = this.status >= 200 && this.status < 300
	    this.statusText = options.statusText
	    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)
	    this.url = options.url || ''
	    this._initBody(bodyInit)
	  }

	  Body.call(Response.prototype)

	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  }

	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''})
	    response.type = 'error'
	    return response
	  }

	  var redirectStatuses = [301, 302, 303, 307, 308]

	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }

	    return new Response(null, {status: status, headers: {location: url}})
	  }

	  self.Headers = Headers
	  self.Request = Request
	  self.Response = Response

	  self.fetch = function(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request
	      if (Request.prototype.isPrototypeOf(input) && !init) {
	        request = input
	      } else {
	        request = new Request(input, init)
	      }

	      var xhr = new XMLHttpRequest()

	      function responseURL() {
	        if ('responseURL' in xhr) {
	          return xhr.responseURL
	        }

	        // Avoid security warnings on getResponseHeader when not allowed by CORS
	        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
	          return xhr.getResponseHeader('X-Request-URL')
	        }

	        return
	      }

	      xhr.onload = function() {
	        var options = {
	          status: xhr.status,
	          statusText: xhr.statusText,
	          headers: headers(xhr),
	          url: responseURL()
	        }
	        var body = 'response' in xhr ? xhr.response : xhr.responseText
	        resolve(new Response(body, options))
	      }

	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'))
	      }

	      xhr.ontimeout = function() {
	        reject(new TypeError('Network request failed'))
	      }

	      xhr.open(request.method, request.url, true)

	      if (request.credentials === 'include') {
	        xhr.withCredentials = true
	      }

	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob'
	      }

	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value)
	      })

	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
	    })
	  }
	  self.fetch.polyfill = true
	})(typeof self !== 'undefined' ? self : this);


/***/ },
/* 7 */,
/* 8 */,
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getMessage(message) {
	  var messageState = message;

	  var MessageContainer = _react2.default.createElement(
	    'section',
	    { className: 'padding text-center text-warning bg-danger' },
	    message
	  );
	  return message ? MessageContainer : false;
	}

	exports.default = getMessage;

/***/ },
/* 10 */,
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _makerequest = __webpack_require__(5);

	var _makerequest2 = _interopRequireDefault(_makerequest);

	var _getmessage = __webpack_require__(9);

	var _getmessage2 = _interopRequireDefault(_getmessage);

	var _auth = __webpack_require__(4);

	var _auth2 = _interopRequireDefault(_auth);

	var _userform = __webpack_require__(12);

	var _userform2 = _interopRequireDefault(_userform);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var UserFormContainer = _react2.default.createClass({
	  displayName: 'UserFormContainer',

	  makeRequest: _makerequest2.default,
	  getMessage: _getmessage2.default,
	  getInitialState: function getInitialState() {
	    return {
	      isLoggedIn: this.props.isLoggedIn || false,
	      submitvalue: this.props.showCreateAccount ? 'Sign Up' : 'Submit',
	      loginHeader: this.props.showCreateAccount ? 'Create Account' : 'Login',
	      form: {
	        email: '',
	        password: ''
	      },
	      message: false
	    };
	  },
	  handleChange: function handleChange(e) {
	    e.preventDefault();
	    var form = this.state.form;
	    form[e.target.name] = e.target.value;
	    this.setState(form);
	  },
	  handleSubmit: function handleSubmit(e) {
	    e.preventDefault();
	    var handleSubmit = this.props.showCreateAccount ? this.handleCreateUser : this.handleLogin;
	    handleSubmit(this.state.form);
	  },
	  handleLogin: function handleLogin(user) {
	    var self = this;
	    var options = {
	      method: 'POST',
	      body: JSON.stringify(user),
	      headers: {
	        'Accept': 'application/json',
	        'Content-Type': 'application/json'
	      }
	    };

	    this.makeRequest('/api/user/login', options).then(function (response) {
	      if (response.error) {
	        self.setState({ message: response.error });
	      } else {
	        _auth2.default.setUser({
	          _id: response._id,
	          email: response.email
	        });
	        window.location = '/';
	      }
	    }).catch(function (err) {
	      console.log(err);
	    });
	  },
	  handleCreateUser: function handleCreateUser(user) {
	    var _this = this;

	    var options = {
	      method: 'POST',
	      body: JSON.stringify(user),
	      headers: {
	        'Accept': 'application/json',
	        'Content-Type': 'application/json'
	      }
	    };

	    this.makeRequest('/api/user', options).then(function (response) {
	      var self = _this;
	      if (response.error) {
	        self.setState({ message: response.error });
	      } else {
	        self.handleLogin(user);
	      }
	    }).catch(function (err) {
	      console.log(err);
	    });
	  },
	  render: function render() {
	    return _react2.default.createElement(
	      'div',
	      { className: 'row' },
	      _react2.default.createElement(_userform2.default, { className: 'form form-user col-sm-6 col-md-offset-3',
	        onChange: this.handleChange,
	        onSubmit: this.handleSubmit,
	        loginHeader: this.state.loginHeader,
	        form: this.state.form,
	        submitvalue: this.state.submitvalue,
	        showCreateAccount: this.props.showCreateAccount,
	        message: this.state.message
	      })
	    );
	  }
	});

	exports.default = UserFormContainer;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _getmessage = __webpack_require__(9);

	var _getmessage2 = _interopRequireDefault(_getmessage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var UserForm = _react2.default.createClass({
	  displayName: 'UserForm',

	  getMessage: _getmessage2.default,
	  createUserMessage: function createUserMessage() {
	    var UserMessage = _react2.default.createElement(
	      'h4',
	      { className: 'text-center' },
	      _react2.default.createElement(
	        'a',
	        { href: '/user/signup' },
	        'Don\'t have a Account? Sign-up!'
	      )
	    );
	    return this.props.showCreateAccount ? false : UserMessage;
	  },
	  render: function render() {
	    return _react2.default.createElement(
	      'form',
	      { onSubmit: this.props.onSubmit, className: this.props.className },
	      _react2.default.createElement(
	        'h3',
	        { className: 'text-center' },
	        this.props.loginHeader
	      ),
	      _react2.default.createElement(
	        'div',
	        { className: 'form-group' },
	        _react2.default.createElement(
	          'label',
	          { htmlFor: 'email' },
	          ' Email '
	        ),
	        _react2.default.createElement('input', { name: 'email', type: 'email', placeholder: 'Your Email',
	          value: this.props.form.email,
	          onChange: this.props.onChange,
	          className: 'form-control',
	          required: true,
	          autoFocus: true })
	      ),
	      _react2.default.createElement(
	        'div',
	        { className: 'form-group' },
	        _react2.default.createElement(
	          'label',
	          { htmlFor: 'password' },
	          ' Password '
	        ),
	        _react2.default.createElement('input', { name: 'password', type: 'password',
	          placeholder: 'Password',
	          value: this.props.form.password,
	          onChange: this.props.onChange,
	          className: 'form-control',
	          required: true })
	      ),
	      _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement('input', { type: 'submit', name: 'submit', value: this.props.submitvalue, className: 'btn btn-primary btn-block' })
	      ),
	      _react2.default.createElement('br', null),
	      this.createUserMessage(),
	      this.getMessage(this.props.message)
	    );
	  }
	});

	exports.default = UserForm;

/***/ }
]);